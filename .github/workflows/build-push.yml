#
name: Build and Push

# Configures this workflow to run on any branch push, pull requests, and releases
on:
  push:
    branches: ['**']  # Run on all branches
  pull_request:
    branches: ['main']
  release:
    types: [published]  # Trigger on release creation

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Login for main branch pushes OR releases
      - name: Log in to the Container registry
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'release'
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: ${{ (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Generate artifact attestation
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'release'
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
      - name: Build cross-platform binaries
        if: github.event_name == 'release'
        run: |
          # Create release directory
          mkdir -p release
          
          # Build for different platforms
          platforms=(
            "linux/amd64"
            "linux/arm64" 
            "windows/amd64"
            "windows/arm64"
            "darwin/amd64"
            "darwin/arm64"
          )
          
          for platform in "${platforms[@]}"; do
            GOOS=${platform%/*}
            GOARCH=${platform#*/}
            
            # Set file extension for Windows
            EXT=""
            if [ "$GOOS" = "windows" ]; then
              EXT=".exe"
            fi
            
            filename="virtual-call-center-${GOOS}-${GOARCH}${EXT}"
            echo "Building $filename..."
            
            CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build -ldflags="-s -w" -o "release/$filename" .
            
            if [ $? -ne 0 ]; then
              echo "Build failed for $GOOS/$GOARCH"
              exit 1
            fi
          done
          
          # List built files
          ls -la release/

      # Upload binaries to release
      - name: Upload release binaries
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
